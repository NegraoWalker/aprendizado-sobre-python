# TIPOS PRIMITIVOS EM PYTHON - GUIA COMPLETO PARA BACKEND
# ========================================================

print("INTRODU√á√ÉO: Python e Tipos Din√¢micos")
print("=" * 50)

# Demonstra√ß√£o da tipagem din√¢mica
variavel = 42
print(f"Valor: {variavel}, Tipo: {type(variavel)}")

variavel = "Agora sou texto"
print(f"Valor: {variavel}, Tipo: {type(variavel)}")

# IMPORTANTE: Evite mudan√ßas de tipo em produ√ß√£o!
print("‚ö†Ô∏è  Em produ√ß√£o, mantenha consist√™ncia de tipos!\n")

# =============================================================================
# 1. N√öMEROS INTEIROS (int) - FUNDA√á√ÉO DOS SISTEMAS BACKEND
# =============================================================================
print("1. N√öMEROS INTEIROS (int)")
print("-" * 30)

# Contextos t√≠picos de backend
user_id = 1547  # IDs de usu√°rios/recursos
status_code = 200  # C√≥digos de resposta HTTP
port = 8080  # Portas de servidor
timeout_seconds = 30  # Configura√ß√µes de timeout

print(f"User ID: {user_id} (tipo: {type(user_id)})")
print(f"Status Code: {status_code}")
print(f"Server Port: {port}")

# Representa√ß√µes especiais (√∫teis em sistemas)
hexadecimal_id = 0xFF  # 255 em decimal - IDs em hex
octal_permission = 0o755  # Permiss√µes de arquivo (Unix/Linux)
binary_flag = 0b1010  # 10 em decimal - flags de bits

print(f"Hex ID: {hexadecimal_id}")
print(f"File Permission: {octal_permission}")
print(f"Binary Flag: {binary_flag}")

# Python permite n√∫meros inteiros de tamanho arbitr√°rio!
big_user_count = 10 ** 15  # 1 quatrilh√£o de usu√°rios (teoricamente)
print(f"Big Number: {big_user_count}")
print(f"Tamanho em bytes: {big_user_count.bit_length() // 8 + 1}")

print("\n")

# =============================================================================
# 2. N√öMEROS DECIMAIS (float) - C√ÅLCULOS E MEDI√á√ïES
# =============================================================================
print("2. N√öMEROS DECIMAIS (float)")
print("-" * 30)

# Aplica√ß√µes comuns em backend
price = 99.99  # Pre√ßos (cuidado com precis√£o!)
api_response_time = 0.247  # Tempos de resposta em segundos
cpu_usage = 78.5  # Percentual de uso de CPU
latitude = -23.5505  # Coordenadas geogr√°ficas
longitude = -46.6333

print(f"Pre√ßo: R$ {price}")
print(f"Tempo de resposta: {api_response_time}s")
print(f"Uso de CPU: {cpu_usage}%")
print(f"Localiza√ß√£o: {latitude}, {longitude}")

# ATEN√á√ÉO: Problemas de precis√£o com float!
print("\n‚ö†Ô∏è  CUIDADO: Problemas de precis√£o financeira")
resultado_impreciso = 0.1 + 0.2
print(f"0.1 + 0.2 = {resultado_impreciso}")  # N√£o √© exatamente 0.3!

# Para c√°lculos monet√°rios, use Decimal (n√£o √© primitivo, mas importante)
from decimal import Decimal

preco_preciso = Decimal('99.99')
desconto = Decimal('10.00')
total = preco_preciso - desconto
print(f"C√°lculo preciso: {total}")

print("\n")

# =============================================================================
# 3. STRINGS (str) - MANIPULA√á√ÉO DE DADOS TEXTUAIS
# =============================================================================
print("3. STRINGS (str) - Manipula√ß√£o Textual")
print("-" * 40)

# Contextos t√≠picos de backend
api_endpoint = "/api/v1/users"  # Rotas de API
database_url = "postgresql://localhost:5432/mydb"
jwt_token = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
error_message = "Usu√°rio n√£o encontrado"
json_response = '{"status": "success", "data": []}'

print(f"Endpoint: {api_endpoint}")
print(f"DB URL: {database_url}")
print(f"Token: {jwt_token[:20]}...")  # S√≥ mostra in√≠cio por seguran√ßa

# Opera√ß√µes essenciais para backend
email = "walker.dev@example.com"

# Valida√ß√µes b√°sicas com strings
is_valid_email = "@" in email and "." in email.split("@")[1]
print(f"Email v√°lido? {is_valid_email}")

# Extra√ß√£o de dados (parsing simples)
token_clean = jwt_token[7:] if jwt_token.startswith("Bearer ") else jwt_token
print(f"Token limpo: {token_clean[:10]}...")

# Formata√ß√£o para logs e respostas
request_id = "req_12345"
log_message = f"[{request_id}] Processando requisi√ß√£o para {api_endpoint}"
print(f"Log: {log_message}")

# Strings multilinha para SQL ou configura√ß√µes
sql_query = """
SELECT u.id, u.name, u.email 
FROM users u 
WHERE u.active = true 
  AND u.created_at > %s
"""
print(f"SQL Query preparada: {sql_query.strip()}")

print("\n")

# =============================================================================
# 4. BOOLEANOS (bool) - CONTROLE L√ìGICO E FLAGS
# =============================================================================
print("4. BOOLEANOS (bool) - Controle e Flags")
print("-" * 40)

# Estados de sistema e controle de fluxo
is_authenticated = True  # Status de autentica√ß√£o
is_admin = False  # Permiss√µes de usu√°rio
service_enabled = True  # Flags de funcionalidade
debug_mode = False  # Configura√ß√µes de ambiente
database_connected = True  # Status de conex√µes

print(f"Usu√°rio autenticado: {is_authenticated}")
print(f"√â administrador: {is_admin}")
print(f"Servi√ßo habilitado: {service_enabled}")

# L√≥gica de neg√≥cio com booleanos
can_access_api = is_authenticated and service_enabled
can_delete_users = is_authenticated and is_admin

print(f"Pode acessar API: {can_access_api}")
print(f"Pode deletar usu√°rios: {can_delete_users}")

# Convers√µes importantes (dados externos chegam como string!)
status_from_api = "true"  # Vem de JSON/form
status_bool = status_from_api.lower() == "true"
print(f"Status convertido: {status_bool}")

# Valores "truthy" e "falsy" - importante para valida√ß√µes
valores_falsy = [False, 0, "", [], {}, None]
valores_truthy = [True, 1, "texto", [1], {"key": "value"}, 42]

print("Valores falsy:", [bool(v) for v in valores_falsy])
print("Valores truthy:", [bool(v) for v in valores_truthy])

print("\n")

# =============================================================================
# 5. NONE (NoneType) - AUS√äNCIA DE VALOR
# =============================================================================
print("5. NONE (NoneType) - Aus√™ncia de Valor")
print("-" * 40)

# Inicializa√ß√£o de vari√°veis
user_session = None  # Sess√£o ainda n√£o criada
cached_data = None  # Cache ainda n√£o populado
last_error = None  # Nenhum erro registrado

print(f"Sess√£o: {user_session}")
print(f"Cache: {cached_data}")


# Fun√ß√£o que pode retornar None (comum em backends)
def find_user_by_email(email):
    """Simula busca no banco - pode n√£o encontrar usu√°rio"""
    if email == "walker@example.com":
        return {"id": 1, "name": "Walker", "email": email}
    return None  # Usu√°rio n√£o encontrado


# Testando a fun√ß√£o
user_found = find_user_by_email("inexistente@example.com")
print(f"Usu√°rio encontrado: {user_found}")

# Verifica√ß√£o segura de None (sempre use 'is', n√£o '==')
if user_found is None:
    print("‚úì Usu√°rio n√£o encontrado - tratamento adequado")
else:
    print(f"Usu√°rio: {user_found['name']}")

# None em estruturas de dados (valores opcionais)
user_profile = {
    "name": "Walker",
    "email": "walker@example.com",
    "phone": None,  # Campo opcional
    "avatar": None  # Ainda n√£o enviado
}

print(f"Perfil: {user_profile}")

print("\n")

# =============================================================================
# 6. CONVERS√ïES E VALIDA√á√ïES - ESSENCIAL PARA BACKEND
# =============================================================================
print("6. CONVERS√ïES E VALIDA√á√ïES - Essencial para Backend")
print("-" * 55)

# Simulando dados vindos de uma API/formul√°rio (sempre strings!)
api_data = {
    "user_id": "1547",
    "age": "28",
    "salary": "5500.50",
    "is_active": "true",
    "last_login": "null"
}

print("Dados recebidos da API:")
for key, value in api_data.items():
    print(f"  {key}: {value} (tipo: {type(value)})")


# Convers√£o segura com tratamento de erros
def safe_convert_to_int(value):
    """Converte valor para int de forma segura"""
    try:
        return int(value) if value and value != "null" else None
    except (ValueError, TypeError):
        return None


def safe_convert_to_float(value):
    """Converte valor para float de forma segura"""
    try:
        return float(value) if value and value != "null" else None
    except (ValueError, TypeError):
        return None


def safe_convert_to_bool(value):
    """Converte valor para bool de forma segura"""
    if isinstance(value, str):
        return value.lower() in ("true", "1", "yes", "on")
    return bool(value)


# Aplicando convers√µes
user_id = safe_convert_to_int(api_data["user_id"])
age = safe_convert_to_int(api_data["age"])
salary = safe_convert_to_float(api_data["salary"])
is_active = safe_convert_to_bool(api_data["is_active"])
last_login = None if api_data["last_login"] == "null" else api_data["last_login"]

print("\nDados convertidos:")
print(f"  user_id: {user_id} (tipo: {type(user_id)})")
print(f"  age: {age} (tipo: {type(age)})")
print(f"  salary: {salary} (tipo: {type(salary)})")
print(f"  is_active: {is_active} (tipo: {type(is_active)})")
print(f"  last_login: {last_login} (tipo: {type(last_login)})")

print("\n")

# =============================================================================
# 7. EXEMPLO PR√ÅTICO: PROCESSAMENTO DE REQUISI√á√ÉO API
# =============================================================================
print("7. EXEMPLO PR√ÅTICO: Processamento de Requisi√ß√£o API")
print("-" * 55)

# Simulando uma requisi√ß√£o POST para criar produto
incoming_request = {
    "product_name": "Notebook Gamer",
    "price": "2999.99",
    "quantity": "5",
    "is_available": "true",
    "category_id": "42",
    "description": "Notebook para jogos de alta performance",
    "discount_percent": "10.5"
}

print("üì• Requisi√ß√£o recebida:")
for key, value in incoming_request.items():
    print(f"  {key}: {value}")

# Valida√ß√£o e convers√£o (c√≥digo t√≠pico de backend)
errors = []
processed_data = {}

# Validar e converter cada campo
try:
    # String obrigat√≥ria
    if not incoming_request.get("product_name"):
        errors.append("Nome do produto √© obrigat√≥rio")
    else:
        processed_data["product_name"] = incoming_request["product_name"]

    # Float obrigat√≥rio (pre√ßo)
    price_str = incoming_request.get("price")
    if not price_str:
        errors.append("Pre√ßo √© obrigat√≥rio")
    else:
        try:
            price = float(price_str)
            if price <= 0:
                errors.append("Pre√ßo deve ser positivo")
            else:
                processed_data["price"] = price
        except ValueError:
            errors.append("Pre√ßo deve ser um n√∫mero v√°lido")

    # Int obrigat√≥rio (quantidade)
    quantity_str = incoming_request.get("quantity")
    if not quantity_str:
        errors.append("Quantidade √© obrigat√≥ria")
    else:
        try:
            quantity = int(quantity_str)
            if quantity < 0:
                errors.append("Quantidade n√£o pode ser negativa")
            else:
                processed_data["quantity"] = quantity
        except ValueError:
            errors.append("Quantidade deve ser um n√∫mero inteiro")

    # Boolean
    is_available = safe_convert_to_bool(incoming_request.get("is_available", "false"))
    processed_data["is_available"] = is_available

    # Int opcional
    category_id = safe_convert_to_int(incoming_request.get("category_id"))
    processed_data["category_id"] = category_id

    # String opcional
    processed_data["description"] = incoming_request.get("description")

    # Float opcional (desconto)
    discount = safe_convert_to_float(incoming_request.get("discount_percent", "0"))
    processed_data["discount_percent"] = discount

except Exception as e:
    errors.append(f"Erro inesperado: {str(e)}")

# Resultado do processamento
print("\nüìã Resultado do processamento:")
if errors:
    print("‚ùå Erros encontrados:")
    for error in errors:
        print(f"  - {error}")
else:
    print("‚úÖ Dados v√°lidos e convertidos:")
    for key, value in processed_data.items():
        print(f"  {key}: {value} (tipo: {type(value)})")

    # Calcular pre√ßo final (exemplo de uso dos tipos convertidos)
    if "price" in processed_data and "discount_percent" in processed_data:
        final_price = processed_data["price"] * (1 - processed_data["discount_percent"] / 100)
        print(f"\nüí∞ Pre√ßo final: R$ {final_price:.2f}")

print("\n")

# =============================================================================
# 8. DICAS CRUCIAIS PARA DESENVOLVIMENTO BACKEND
# =============================================================================
print("8. DICAS CRUCIAIS PARA BACKEND")
print("-" * 35)

print("""
üö® REGRA DE OURO: Sempre valide e converta dados externos!

‚úÖ BOAS PR√ÅTICAS:
‚Ä¢ Use 'is None' em vez de '== None'
‚Ä¢ Implemente convers√£o segura com try/except
‚Ä¢ Para dinheiro, considere usar Decimal em vez de float
‚Ä¢ Valide tipos antes de usar em opera√ß√µes cr√≠ticas
‚Ä¢ Mantenha consist√™ncia de tipos em fun√ß√µes

‚ùå EVITE:
‚Ä¢ Mudan√ßas de tipo na mesma vari√°vel em produ√ß√£o
‚Ä¢ Assumir que dados externos est√£o no tipo correto
‚Ä¢ Opera√ß√µes matem√°ticas diretas com dados n√£o validados
‚Ä¢ Compara√ß√µes de float para igualdade exata

üîß PARA LEMBRAR:
‚Ä¢ Python: tipagem din√¢mica, mas seja disciplinado
‚Ä¢ Todos os primitivos s√£o imut√°veis
‚Ä¢ None representa aus√™ncia de valor
‚Ä¢ Booleanos controlam fluxo de neg√≥cio
‚Ä¢ Strings s√£o Unicode por padr√£o
""")
